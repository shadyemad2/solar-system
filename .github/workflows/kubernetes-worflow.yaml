name: Solar System Workflow

on:
  workflow_dispatch:

jobs:
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Docker Hub Login
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build Docker Image for Testing
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

  dev-deploy:
    name: Deploy to Dev Env
    runs-on: ubuntu-latest
    needs: docker-build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install kubectl CLI
        uses: azure/setup-kubectl@v3
        with:
          version: '1.26.0'

      - name: Set Kubeconfig Context
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: Fetch Kubernetes Cluster Details
        run: |
          kubectl version --short
          echo "-----------------------------------------"
          kubectl get nodes

      - name: Replace tokens in deployment.yaml
        uses: danielr1996/envsubst-action@1.1.0
        env:
          IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
          NAMESPACE: ${{ vars.NAMESPACE }}
          REPLICAS: ${{ vars.REPLICAS }}
        with:
          input: "kubernetes/development/deployment.yaml"
          output: "kubernetes/development/deployment.yaml"

      - name: Replace tokens in service.yaml
        uses: danielr1996/envsubst-action@1.1.0
        env:
          NAMESPACE: ${{ vars.NAMESPACE }}
        with:
          input: "kubernetes/development/service.yaml"
          output: "kubernetes/development/service.yaml"

      - name: Show processed manifests
        run: cat kubernetes/development/*.yaml

      - name: Create Kubernetes namespace (if not exists)
        run: |
          kubectl create ns ${{ vars.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Create MongoDB secret
        run: |
          kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
            --from-literal=MONGO_URI=${{ vars.MONGO_URI }} \
            --from-literal=MONGO_USERNAME=${{ vars.MONGO_USERNAME }} \
            --from-literal=MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy manifests
        run: |
          kubectl apply -f kubernetes/development/
          kubectl get all -n ${{ vars.NAMESPACE }}

